use dbchevalersk6;
drop procedure if exists ajouterArme;
drop procedure if exists ajouterPotion;
drop procedure if exists ajouterElement;
drop procedure if exists ajouterArmure;
drop procedure if exists trouverJoueur;
drop procedure if exists ajouterJoueurs;
drop procedure if exists ajouterItemInv;
drop procedure if exists rechercherItem;
drop procedure if exists avoirInventaireJ;
drop procedure if exists modiferProfil;


drop trigger if exists CTRLInsertItems;


delimiter |
create procedure ajouterArme(
in pNom varchar(50),
in pQuantite int,
in pPrix int,
in pPhoto varchar(100),
in pDescription varchar(500),
in pEfficacite varchar(30),
in pGenreArme varchar(45))
begin
declare pTypeItem char(1) default 'A';
declare pidItem int;
start transaction;
insert into Items (nom, quantiteStock, prix, photo,typeItem)
values ( pNom, pQuantite, pPrix, pPhoto, ptypeItem);
select LAST_INSERT_ID() into pidItem;
insert into Armes (idItem, description,efficacite, genre)
values (pidItem, pdescription,pEfficacite, pGenreArme);
commit;
end |

delimiter |
create procedure ajouterPotion(
in pNom varchar(45),
in pQuantite int,
in pPrix int,
in pPhoto varchar(100),
in pEffet varchar(45),
in pDuree int,
in ptypePotion char(1))
begin
declare pTypeItem char(1) default 'P';
declare pidItem int;
start transaction;
insert into Items (nom, quantiteStock, prix, photo, typeItem)
values ( pNom, pQuantite, pPrix, pPhoto, ptypeItem);
select LAST_INSERT_ID() into pidItem;
insert into Potions (idItem, effet,duree, TypePotion)
values (pidItem, pEffet, pDuree, ptypePotion);
commit;
end |

delimiter |
create procedure ajouterElement(
in pNom varchar(45),
in pQuantite int,
in pPrix int,
in pPhoto varchar(100),
in prarete tinyint,
in pdangerosite tinyint )
begin
declare pTypeItem char(1) default 'E';
declare pidItem int;
start transaction;
insert into Items (nom, quantiteStock, prix, photo,typeItem)
values ( pNom, pQuantite, pPrix, pPhoto, ptypeItem);
select LAST_INSERT_ID() into pidItem;
insert into Elements (idItem, rarete, dangerosite)
values (pidItem, prarete, pdangerosite);
commit;
end |

delimiter |
create procedure ajouterArmure(
in pNom varchar(50),
in pQuantite int,
in pPrix int,
in pPhoto varchar(100),
in ptaille varchar(20),
in pmatiere varchar(45))
begin
declare pTypeItem char(1) default 'R';
declare pidItem int;
start transaction;
insert into Items (nom, quantiteStock, prix, photo,typeItem)
values ( pNom, pQuantite, pPrix, pPhoto, ptypeItem);
select LAST_INSERT_ID() into pidItem;
insert into Armures (idItem, taille,matiere)
values (pidItem,ptaille,pmatiere);
commit;
end |

DELIMITER |
CREATE TRIGGER CTRLInsertItems
before insert ON Items
for each row
begin
declare
maxPrix int;
declare minPrix int;
-- on garantit que le prix de la potion doit être plus grand que celui de --l'élément
if(new.TypeItem='P') Then
select max(prix) into maxPrix from Items where typeItem ='E' ;
if(new.prix <=maxPrix) then
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le prix est plus bas que éléments';
end if;
end if;
-- on garantit que le prix de l'élément doit être plus petit que celui de la potion
if(new.typeItem='E') Then
select min(prix) into minPrix from Items where typeItem ='P' ;
if(new.Prix >=minPrix) then
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Le prix dépasse celui des potions';
end if;
end if;
END |;

DELIMITER |

CREATE PROCEDURE trouverJoueur(
    IN pcourriel VARCHAR(45),
    IN pmp VARCHAR(20)
)
BEGIN
    SELECT * FROM Joueurs WHERE courriel = pcourriel AND motdepasse = pmp;
END |

DELIMITER ;


delimiter |
create procedure ajouterJoueurs(
in pAlias varchar(8),
in pnom varchar(25),
in pPrenom varchar(25),
in pNiveau varchar(15),
in pEstAdmin tinyint,
in pmotDePasse varchar(20),
in pCourriel varchar(45)
)
begin
start transaction ;
insert into Joueurs (alias,nom,prenom,niveau,estAdmin,motdepasse,courriel)
values (pAlias,pnom,pPrenom,pNiveau,pEstAdmin,pmotDePasse,pCourriel);
commit;
end |

delimiter |
create procedure ajouterItemInv(
in pidItem int,
in pidJ int,
in pQt int
)
begin
   DECLARE itemExists INT;
	DECLARE	soldeJ INT;
    DECLARE	prixItem INT;
    DECLARE qtItem int;
	-- Vérifier si l'objet existe déjà dans l'inventaire du joueur
    SELECT COUNT(*) INTO itemExists FROM Inventaires WHERE dItem = pidItem AND idJoueur = pidJ;
    -- Prends le solde du joueur
    SELECT solde INTO soldeJ FROM Joueurs WHERE idJoueur = pidJ;
    -- Prends le prix de l'item
    SELECT 	prix INTO prixItem FROM Items WHERE idItem = pidItem;
    -- Prends la quantité de l'item
    SELECT quantiteStock INTO qtItem FROM Items WHERE idItem = pidItem;
    
start transaction ;
-- Verifi le solde du joueur avant l'Achat
IF soldeJ >= pQt * prixItem then
   -- Verifi si la quantité est bonne avant l'achat
	IF qtItem >= pQt then
	  -- Si l'objet existe déjà, mettre à jour la quantité
		IF itemExists > 0
		THEN UPDATE Inventaires SET quantiteInventaire = quantiteInventaire + pQt WHERE dItem = pidItem AND idJoueur = pidJ;
		else
		-- Ajout du nouvel item
			insert Inventaires values (pidItem,pidJ,pQt);
		end if;
		-- Reduit le solde
		UPDATE Joueurs SET solde = solde - pQt * prixItem WHERE idJoueur = pidJ;
        -- Reduit la quantité 
        UPDATE Items SET quantiteStock = quantiteStock - pQt WHERE idItem = pidItem;
        -- Rends l'item indisponible 
        UPDATE Items SET flagDispo = 0 WHERE idItem = pidItem;
     end if;
 end if;
commit;
end |

DELIMITER |

CREATE PROCEDURE rechercherItem(
    IN pid INT
)
BEGIN
DECLARE pTypeItem Char(1) ;
 SELECT typeItem INTO pTypeItem FROM Items WHERE idItem =pid;
    IF pTypeItem = 'R' THEN
        SELECT taille, matiere, nom,quantiteStock,prix,photo,typeItem,flagDispo FROM Armures INNER JOIN Items On Armures.idItem =Items.idItem WHERE Items.idItem = pid ;
    ELSEIF pTypeItem = 'A' THEN
        SELECT description, efficacite, genre, nom,quantiteStock,prix,photo,typeItem,flagDispo FROM Armes INNER JOIN Items On Armes.idItem=Items.idItem WHERE Items.idItem = pid ;
    ELSEIF pTypeItem = 'P' THEN
        SELECT duree, effet, typePotion, nom,quantiteStock,prix,photo,typeItem,flagDispo FROM Potions INNER JOIN Items On Potions.idItem=Items.idItem WHERE Items.idItem = pid;
    ELSEIF pTypeItem = 'E' THEN
        SELECT rarete, dangerosite, nom,quantiteStock,prix,photo,typeItem,flagDispo FROM Elements INNER JOIN Items On Elements.idItem=Items.idItem WHERE Items.idItem = pid ;
    END IF;
END |

DELIMITER ;

DELIMITER |

CREATE PROCEDURE avoirInventaireJ(
    IN pid INT
)
BEGIN
  SELECT * FROM Inventaires WHERE idJoueur = pid;
END |

DELIMITER ;

DELIMITER |
CREATE PROCEDURE modiferProfil(
in pidJ INT,
 in palias VARCHAR(50),
 in pnom VARCHAR(50),
 in pprenom VARCHAR(50),
 in pmp VARCHAR(50),
 in pcourriel VARCHAR(50)
)
BEGIN
	START TRANSACTION;
		UPDATE Joueurs SET alias = palias, nom = pnom, prenom = pprenom, motdepasse = pmp, courriel = pcourriel 
        WHERE idJoueur = pidJ;
    COMMIT;
END |